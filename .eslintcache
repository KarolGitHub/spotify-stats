[{"C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\index.js":"1","C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\App\\App.js":"2","C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\util\\spotify.js":"3","C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\Ranking\\Ranking.js":"4","C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\Stats\\Stats.js":"5","C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\util\\exampleData.js":"6","C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\Tracks\\Tracks.js":"7","C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\ControlPanel\\ControlPanel.js":"8","C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\GenreChart\\GenreChart.js":"9","C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\Track\\Track.js":"10","C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\TracksChart\\TracksChart.js":"11","C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\ArtistsChart\\ArtistsChart.js":"12"},{"size":165,"mtime":1614273528000,"results":"13","hashOfConfig":"14"},{"size":4898,"mtime":1637518651702,"results":"15","hashOfConfig":"14"},{"size":3862,"mtime":1637574527884,"results":"16","hashOfConfig":"14"},{"size":398,"mtime":1637361845937,"results":"17","hashOfConfig":"14"},{"size":1395,"mtime":1637360983685,"results":"18","hashOfConfig":"14"},{"size":393933,"mtime":1637518648829,"results":"19","hashOfConfig":"14"},{"size":630,"mtime":1636669404240,"results":"20","hashOfConfig":"14"},{"size":1083,"mtime":1637357626320,"results":"21","hashOfConfig":"14"},{"size":3344,"mtime":1642344548773,"results":"22","hashOfConfig":"14"},{"size":1323,"mtime":1637518651702,"results":"23","hashOfConfig":"14"},{"size":3831,"mtime":1642344548773,"results":"24","hashOfConfig":"14"},{"size":3513,"mtime":1642344548774,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ervk5x",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"45"},"C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\index.js",[],"C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\App\\App.js",[],"C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\util\\spotify.js",[],"C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\Ranking\\Ranking.js",[],"C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\Stats\\Stats.js",[],"C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\util\\exampleData.js",[],"C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\Tracks\\Tracks.js",[],"C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\ControlPanel\\ControlPanel.js",[],"C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\GenreChart\\GenreChart.js",["53"],"import React, { Component } from 'react';\n\nimport Chart from 'chart.js';\nimport './GenreChart.css';\n\nconst reducer = (acc, cur) => acc + cur;\nlet gerneChart;\nlet genreNames = null;\nlet genreAmounts = null;\nlet genreAmountsTotal;\nlet duration = 1000;\n\nChart.defaults.global.defaultFontFamily = \"'PT Sans', sans-serif\";\nChart.defaults.global.legend.display = false;\n\nclass GenreChart extends Component {\n  chartRef = React.createRef();\n\n  componentDidMount() {\n    this.buildChart();\n  }\n\n  componentDidUpdate() {\n    this.buildChart();\n  }\n\n  buildChart = () => {\n    if (this.props.animate) {\n      duration = 800;\n    } else {\n      duration = 0;\n    }\n    const genreData = this.props.sortedGenres?.[0];\n    if (typeof genreData === 'undefined') return;\n    const myChartRef = this.chartRef.current.getContext('2d');\n    if (genreData[1].length > 100) {\n      genreAmounts = genreData[1].filter((x) => x > 3).slice(0, 15);\n    } else {\n      genreAmounts = genreData[1].slice(0, 15);\n    }\n    genreNames = genreData[0].slice(0, genreAmounts.length);\n    genreAmountsTotal = genreAmounts.reduce(reducer);\n\n    if (typeof gerneChart !== 'undefined') gerneChart.destroy();\n\n    gerneChart = new Chart(myChartRef, {\n      type: 'bar',\n      data: {\n        labels: genreNames,\n        datasets: [\n          {\n            label: '',\n            data: genreAmounts,\n            backgroundColor: [\n              'rgba(140, 230, 255, 0.9)',\n              'rgba(133, 232, 118, 0.91)',\n              'rgba(255, 255, 120, 1)',\n              'rgba(255, 142, 128, 1)',\n              'rgba(171, 116, 232, 0.91)',\n              'rgba(100, 172, 232, 0.91)',\n              'rgba(122, 252, 142, 1)',\n              'rgba(232, 215, 102, 0.91)',\n              'rgba(255, 149, 102, 1)',\n              'rgba(214, 110, 255, 1)',\n              'rgba(72, 237, 255, 1)',\n              'rgba(105, 232, 56, 0.9)',\n              'rgba(255, 200, 51, 0.9)',\n              'rgba(255, 69, 59, 0.9)',\n              'rgba(117, 53, 232, 0.6)',\n            ],\n            borderColor: ['rgba(255,255,255,1)'],\n            borderWidth: 0.5,\n            hoverBorderWidth: 6,\n          },\n        ],\n      },\n      options: {\n        tooltips: {\n          mode: 'index',\n          cornerRadius: 6,\n          bodyFontSize: 16,\n          caretSize: 10,\n          callbacks: {\n            label: function (tooltipItems, data) {\n              return (\n                data.labels[tooltipItems.index] +\n                ' ' +\n                Math.round(\n                  ((data.datasets[tooltipItems.datasetIndex].data[\n                    tooltipItems.index\n                  ] /\n                    100) *\n                    100 +\n                    Number.EPSILON) *\n                    100\n                ) /\n                  100 +\n                '%'\n              );\n            },\n          },\n        },\n        animation: {\n          duration: duration,\n        },\n      },\n    });\n  };\n\n  render() {\n    let chartHeader = `${this.props.chartDataType} chart`;\n    let chart;\n\n    if (this.props.sortedGenres) {\n      chart = (\n        <canvas\n          width='100%'\n          height='100%'\n          id='genreChart'\n          ref={this.chartRef}\n        />\n      );\n    } else {\n      chart = this.props.dataMessage;\n    }\n\n    return (\n      <div className='chartContainer'>\n        <h2>{chartHeader}</h2>\n        {chart}\n      </div>\n    );\n  }\n}\n\nexport default GenreChart;\n",["54","55"],"C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\Track\\Track.js",[],"C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\TracksChart\\TracksChart.js",[],"C:\\Users\\karol\\Documents\\dev\\projects\\spotify-stats\\src\\components\\ArtistsChart\\ArtistsChart.js",["56"],"import React, { Component } from 'react';\n\nimport Chart from 'chart.js';\nimport './ArtistsChart.css';\n\nconst reducer = (acc, cur) => acc + cur;\nlet artistsChart;\nlet artistsNames = null;\nlet artistsAmounts = null;\nlet artistsAmountsTotal;\nlet duration = 1000;\n\nChart.defaults.global.defaultFontFamily = \"'PT Sans', sans-serif\";\nChart.defaults.global.legend.display = false;\n\nclass ArtistsChart extends Component {\n  chartRef = React.createRef();\n\n  componentDidMount() {\n    this.buildChart();\n  }\n\n  componentDidUpdate() {\n    this.buildChart();\n  }\n\n  buildChart = () => {\n    if (this.props.animate) {\n      duration = 800;\n    } else {\n      duration = 0;\n    }\n\n    const artistsData = this.props.sortedArtists;\n    if (!artistsData.length) return;\n    const myChartRef = this.chartRef.current.getContext('2d');\n    if (artistsData[1]?.length > 100) {\n      artistsAmounts = artistsData[0].filter((x) => x > 3).slice(0, 15);\n    } else {\n      artistsAmounts = artistsData[0].slice(0, 15);\n    }\n    artistsAmounts = artistsAmounts.map((artist) => artist.popularity);\n\n    artistsNames = artistsData[0].slice(0, artistsAmounts.length);\n    artistsNames = artistsNames.map((artist) => artist.name);\n    artistsAmountsTotal = artistsAmounts.reduce(reducer);\n\n    if (typeof artistsChart !== 'undefined') artistsChart.destroy();\n\n    artistsChart = new Chart(myChartRef, {\n      type: 'bar',\n      data: {\n        labels: artistsNames,\n        datasets: [\n          {\n            label: '',\n            data: artistsAmounts,\n            backgroundColor: [\n              'rgba(140, 230, 255, 0.9)',\n              'rgba(133, 232, 118, 0.91)',\n              'rgba(255, 255, 120, 1)',\n              'rgba(255, 142, 128, 1)',\n              'rgba(171, 116, 232, 0.91)',\n              'rgba(100, 172, 232, 0.91)',\n              'rgba(122, 252, 142, 1)',\n              'rgba(232, 215, 102, 0.91)',\n              'rgba(255, 149, 102, 1)',\n              'rgba(214, 110, 255, 1)',\n              'rgba(72, 237, 255, 1)',\n              'rgba(105, 232, 56, 0.9)',\n              'rgba(255, 200, 51, 0.9)',\n              'rgba(255, 69, 59, 0.9)',\n              'rgba(117, 53, 232, 0.6)',\n            ],\n            borderColor: ['rgba(255,255,255,1)'],\n            borderWidth: 0.5,\n            hoverBorderWidth: 6,\n          },\n        ],\n      },\n      options: {\n        tooltips: {\n          mode: 'index',\n          cornerRadius: 6,\n          bodyFontSize: 16,\n          caretSize: 10,\n          callbacks: {\n            label: function (tooltipItems, data) {\n              return (\n                Math.round(\n                  ((data.datasets[tooltipItems.datasetIndex].data[\n                    tooltipItems.index\n                  ] /\n                    100) *\n                    100 +\n                    Number.EPSILON) *\n                    100\n                ) / 100\n              );\n            },\n          },\n        },\n        animation: {\n          duration: duration,\n        },\n      },\n    });\n  };\n\n  render() {\n    let chartHeader = `${this.props.chartDataType} chart`;\n    let chart;\n\n    if (this.props.sortedArtists) {\n      chart = (\n        <canvas\n          width='100%'\n          height='100%'\n          id='artistsChart'\n          ref={this.chartRef}\n        />\n      );\n    } else {\n      chart = this.props.dataMessage;\n    }\n\n    return (\n      <div className='chartContainer'>\n        <h2>{chartHeader}</h2>\n        {chart}\n      </div>\n    );\n  }\n}\n\nexport default ArtistsChart;\n",{"ruleId":"57","severity":1,"message":"58","line":42,"column":5,"nodeType":"59","messageId":"60","endLine":42,"endColumn":22},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"57","severity":1,"message":"65","line":46,"column":5,"nodeType":"59","messageId":"60","endLine":46,"endColumn":24},"no-unused-vars","'genreAmountsTotal' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["66"],"no-negated-in-lhs",["67"],"'artistsAmountsTotal' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]